Sorting Algorithms

Bubble Sort
----------------------------


// Helper function
function swap(arr, i, j) {
  let temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
}

function bubbleSort(arr) {
  for(var j = 0; j < arr.length; j++) {
    let swapped = false;
    // this will keep from running into an error. I only need to do one less comparison than the number of cards I'm sorting.
    for(var i = 0; i < arr.length - 1; i++) {
      if(arr[i] > arr[i+1]) {
        swap(arr, i, i+1);
        swapped = true;
      }
    }
    // If nothing has been swapped, end the function - nothing needs to swap;
    if(!swapped) {
      return 
    }
  }
}


let nums = [1,4,3,5,7,6,9,8,10]
// for(var i = 0; i < 1000; i++) {
//   nums.push(Math.random()*100)
// }
// console.time('bubbleSort')
console.log('Before sort', nums);

bubbleSort(nums);
// console.timeEnd('bubbleSort')
console.log('After sort', nums)




Merge Sort
--------------------
Divide and conquer
Break up the array into smaller chunks, get them sorted, and repeat.
We'll be increasing the complexity of the code, but drastically increasing the performance of it.

Combine data into new arrays, then compare them one item at a time and repeat.

// We assume that array 1 and array 2 are sorted.


function merge(arr1, arr2) {
  // I want to repeat this function until one of the arrays empties out.

  let mergeArr = []
  do {
    if(arr1[0] < arr2[0]) {
      // Remember: shift removes the first element of the array
      mergeArr.push(arr1.shift());
    } else {
      mergeArr.push(arr2.shift());
    }
    // while both of these arrays are not empty - that means that as soon as one of the arrays is empty, the do while loop will terminate.
  } while(arr1.length && arr2.length)
  // Spread operator here pushes all of the elements of the array into the new array, not pushing an actual array into the new array.
  // One of these arrays will be empty.
  mergeArr.push(...arr1, ...arr2);
  return mergeArr
}


/*This will take two arrays that are sorted, create a new array for 
them to go into. Will compare the first items on both arrays, see 
which is smaller, and merge accordingly. This covers the bulk of our 
sort.*/

let arr1 = [1,3,7,9,10,15]
let arr2 = [3,6,8,19,29,1000,2000,3000]

let mergedArr = merge(arr1, arr2);

// console.log(mergedArr);



function mergeSort(arr) {
  // iff arr.length is equal to one, you have a sorted array.
  if(arr.length === 1) {
    // Escape case:
    return arr;
  }
  // 1. Create two smaller arrays to sort. Splitting into two arrays the midpoint:
  let mid = arr.length / 2;
  let left = arr.slice(0, mid);
  let right = arr.slice(mid)
  console.log('Left before sort: ', left)
  console.log('Right before sort: ', right)
  let sortedLeft = mergeSort(left);
  let sortedRight = mergeSort(right)
  
  console.log("left: ",left);
  console.log("right: ",right);
  return merge(sortedLeft, sortedRight);
}

let arr3 = [3,7,5,8,53,24,556,46,]

let small = [4,3,1,6,15,12]

mergeSort(small);


/*
The recursion is handling most everything.
Merge Sort always returns sorted arrays, because merge sort eventually breaks things down to single arrays (which are sorted)
*/



Quick Sort (or Pivot Sort)
--------------------------------

The goal at each state is to just split things up
Partition,
Pivot (consider it a random card), 
Index


Last thing that will happen: the partition and pivot will swap places.

If the value at index is less than the pivot, it will swap with partition.


