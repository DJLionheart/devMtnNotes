DATA STRUCTURES

  //////////////////
 //   Recursion  //
//////////////////

Doing something over and over.


Dealing with Repetition:

Hard code:
If I just need to call something twice, I can just call it twice (good for things you need to repeat about three times or less)

For Loops:
Good for arbitrary numbers, a large number, or arrays and objects.

While Loops:
Unkown number of times, you just know an end condition you want to meet. It will repeat as many times as it needs to.

do {
    nextPlayer();
} while (!gameOver);

Recursion:
Variable, unknown depth.
Variable Depth:

I have an object, but no standard structure for as deep as the rabbit hole will go.

Fractals

Tower of Hanoi
(Forget about the concept of doing everything)
Recursive structure: I have to keep moving things around.


To create a recursive function, all you need is a function that calls itself at some point.
An additional step: you need some criteria that will stop you from invoking the function infinitely.


sum(15) => 15 + 14 + 13....

function sum(number) {
    ifi( number <= 1 ) {
        return number;
    }
    return number + sum(number - 1)
}

consosle.log(sum(5))

Two important pieces:
1. Base case (or escape case where we don't call the function again)
2. Function invokation.

When should I call it again, and when should I stop.


Fibonaci Sequence:
1, 1, 2, 3, 5, 8, 13, 21...

f(n) = f(n-1) + f(n-2);
f(1) = 1
f(2) = 1

function fib(num) {
    if(num <= 2) {
        return 1
    }
    return fib(num - 1) + fib(num - 2);
}

25

24+23 = 47
23+22 = 45
22+21 = 43
21+20 = 41
20+19 = 39
19+18 = 37
18+17 = 35
17+16 = 33
16+15 = 31
15+14 = 29
14+13 = 27
13+12 = 25
12+11 = 23
11+10 = 21
10+9 = 19
9+8 = 17
8+7 = 15
7+6 = 13
6+5 = 11
5+4 = 9
4+3 = 7
3+2 = 5
2+1 = 3
1+1 = 2
1 = 1


We just say, here's how you solve the problem for a single step.
I'm defining what my sum is, based off the sum of something smaller.


  //////////////////
 // Linked Lists //
//////////////////

Scavenger hunt storage.
You start with a note that tells you where to find the next item.
Also, with the next item, there's a hint to find the next item.

A piece of data you're interested in, as well as somewhere to go to find more data.


Adding a node to a linked list: you have to move the hints as well (two of them)

Removing nodes: adjust the arrow/hint that led to it, to point at the node right after.



class Node{
  constructor(value, list){
    this.list = list;
    this.data = value;
    this.next=null;
  }
  setData(value){
    this.data = value;
  }
  getData(value){
    return this.data;
  }
}

class LinkedList{
  constructor(){
    this.head=null;
    this.length=0;
  }
  add(value){
    let node = new Node(value, this);
    
    if (!this.head){
      this.head = node;
      this.length = 1;
      return 
    }
    let currentNode = this.head;
    while(currentNode.next) {
      currentNode = currentNode.next
    } 
    currentNode.next = node;
    this.length++;
  }
  
  remove(index){
    if (this.length <= index){
      return 'Nothing to remove';
    }
    if (index === 0){
      this.head = this.head.next;
      this.length--;
      return 
    }
    
    let currentNode = this.head;
    for (var i=0;i<index-1;i++){
      currentNode = currentNode.next;
    }
    currentNode.next = currentNode.next.next
    this.length--;
  }
  
  display(){
    console.log("This list has " + this.length + " nodes");
    if (this.head){
      let currentNode = this.head;
      let str = '';
      do{
        str += currentNode.getData() + ' -> '
        currentNode = currentNode.next;
      }while(currentNode)
      str += 'NULL'
      console.log(str);
    }else{
      console.log("The list is empty");
    }
  }
}


  /////////////////
 // Binary Tree //
/////////////////

Root Node - Starting point of the tree.

Instead of having a single next property, the root node has a left or right property it can look at.

The structure of the tree keeps track of the sorting for me.

Adding a new node: 
Size
Depth

Root node will have a size and depth of 1 (if not already created).


How to remove nodes:

More difficult in this case, because there are lots of things we have to worry about. 
Do the children nodes have any children themselves?



Recursion: 
1. Escape Case
2. Next Case