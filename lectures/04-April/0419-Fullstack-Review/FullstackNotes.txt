FULLSTACK REVIEW - 19 April 2018



Routes:
------------------

Home (login)
path='/'

Private
path='/private'





Users Table
-------------------

ID - Primary Key
USER_NAME - Text
IMG - Text
Auth_ID - Text

(Not varchar, because we're logging in with google, and I'm going to trust that google won't mess up my server).

If it was a more serious app, I would look into the auth id data and put my own checks in place.





For personal projects, get an idea of your component tree.
Depending on how many major components you have will determine what you store on redux.


Where possible, I'm going to hit an endpoint, get the data I need, modify it on the server, and THEN send it to the front-end.
BUT heavy lifting can be done on the front end.

Axios call - refactor the endpoint to do more heavy lifting.





Body Parser makes it so you can access data on req.body

Express has its own body parser



CORS - 
------------------
By default, no cross-origin requests are allowed.
That's why using proxy in package.json is important.





Express Session 
------------------------------
app.use(session({
    ........
}))

The second a request hits the server's session middleware, it asks the browser "have I given you a cookie?"
If the answer is no, Session creates a session ID, and it gets saved in the Session Store.
Session id: 283237 {
    (empty object)
}

Server then sends a cookie to the computer with the created session ID.

Then, anytime the client app interacts with the server, the browser will send the cookie back (with the session id), and the server finds the userID in the store and
puts it on the req object (req.session >>>>> will contain any session info we put on it.)


req.session.user = 'Jed'

//>>>>

2468 {
    user: 'Jed
}

Whatever you put on the session object will live there until the session expires, or until you logout/destroy the session.


Race Conditions - when you're trying to modify the same pieces of data at the same time.
Usually, keep resave to false, and saveUninitialized doesn't usually matter



passport.serialize()
------------------------------------
Takes the profile data we give it, and inserts it into the Session 'store'


passport.deserializeUser()
-------------------------------------
In charge of retrieving info from the store.
Its main purpose is to put information directly on the req object.



Massive
--------------------------------------
app.get(...................)

app {

    get: function....},

    set: function.....}

    {
        db: db instance/ connection
    }
}


app.set('db')
This adds the string 'db' as the key for the key/value pair in the subobject in app

App.set will look for the object with 'db' as the key and yield the db instance/connection




Database Queries
--------------------------------------
Best practice: any queries I write, I will put in my db folder.
There are ways to generate sql statements off of a spreadsheet...

USE SEED FILES... You will have access to how you created the tables, in case something ever happens.




-- Insert this user into the database, and then return the user
-- Instead of having to do another find user call, returning *; will return it back right away!
-- This can also be used for deleting from tables.


passport.deserializeUser() is only for after login...


Limit the amount of ways you can log in. If you want to provide multiple options, you'll have to link accounts



//////////////
/////////
////

Front end

////

/////////
///////////////


DOM - Document Object Model:
Browser's internal rendering of our page.
One file, our hyper text markup file.

document.getElementById('root') (vanilla js)

document: index.html


<HashRouter> ---
--------------------------------
Its main purpose is to keep track of the url. If I change from / to /private, HashRouter will check any of the routes we have made.
If a route matches, it will change the javascript to display the correct info.

<Switch></Switch> makes sure that we don't render too many routes. Renders one at a time.

Without using 'exact', the Router would see the / and never go past it.


How do I know whether a component needs to be a class or a functional component?
// Does this component need state? Does it need access to any lifecycle methods? If yes to any of those, it should be a class.



Run NPM Start early on. As you're building in a feature, debug! Check to make sure it works before you move on to run 500 hours of code.


Named Exports --------
-------------------------------------------
Instead of exporting by default, you can just export a function or piece of data. Then, when importing it into another JS file, we can either destructure:
import { MethodName } from 'react'
-OR-
import React.MethodName


JavaScript is an asynchronous language because of Promises. Anytime you assign a function to a variable, the function has to evaluate first before it does anything.


Axios request immediately returns a promise object. 

SO, userData has value - - a promise


Redux Promise Middleware -------
----------------------------------------------------------
Checking for every action that gets sent through the reducer, if the value is a promise. If it's not a promise, it flows through the reducer no problem.

If it IS a promise, it concatenates "pending" or "fulfilled" and will send it through again.




Reducer ----
---------------------------------
If the new piece of state is NOT equal to the previous state, it will replace the state in the store( add it to the array of all previous states)





serialize user places the primary key in the session

deserializeUser finds the session user object in the session store.
Whatever we pass out of it, it puts directly on the req object for us.

If you want to protect a route, hit that auth/me endpoint, and it will tell you that they're logged in.
Hit it on a componentDidMount to check that someone is logged in.


Protect Data ----------
---------------------------------------------------------
First and foremost on the back end, protect your data.

Protect it on the front end as well (there are ways to do this with Router)



//////////////////////////////////////
/////////              /////////////
/////////  DATA FLOW  /////////////
/////////             ///////////
///////////////////////////////

npm run build

This is a build script.

When I run it, it goes through the entire app and compiles everything into a build folder.

Static Assets: CSS, JavaScript, Media

(Uglified, minified version of our code)


What do we do with this ugly code?

If I want to serve up the static files in the build folder from one server, I just add one piece of code to the server index.js

--------------------------------------------------
app.use(express.static(__dirname + './../build'))
--------------------------------------------------

(One folder up, then to the build folder.)
"Server! Go find these files in the build folder"

__dirname is a keyword in node, representing the directory

If i wanted to make this work, I would have to change the success and failure redirects in the app.get('/auth/callback')